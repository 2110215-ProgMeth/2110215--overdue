@startuml
class worldObject.buildings.ChimneyHouse {
~ Image i
~ WritableImage image
+ <<Create>> ChimneyHouse(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.buildings.LongHouse {
~ Image i
~ WritableImage image
+ <<Create>> LongHouse(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.forest.ForestTreeS {
~ Image i
~ WritableImage image
+ <<Create>> ForestTreeS(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.npc.Merchant {
~ Image i
~ WritableImage image
+ <<Create>> Merchant(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.forest.NormalTree {
~ Image i
~ WritableImage image
+ <<Create>> NormalTree(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.Player {
+ int screenX
+ int screenY
+ int spriteCounter
+ int spriteNum
+ boolean front
+ boolean trade
+ Rectangle tradeBox
+ {static} int currentMoney
+ {static} HashMap<String,Integer> playerInventory
+ Image up0
+ Image up1
+ Image up2
+ Image down0
+ Image down1
+ Image down2
+ Image left0
+ Image left1
+ Image left2
+ Image right0
+ Image right1
+ Image right2
+ <<Create>> Player(int,int)
- void up()
- void down()
- void left()
- void right()
+ void updateCoordinate()
+ void interactObject(int)
+ void draw(GraphicsContext)
+ boolean isDestroyed()
+ void setSpeed(int)
+ {static} void setMoney(int)
+ {static} int getMoney()
+ {static} HashMap<String,Integer> getPlayerInventory()
}
class worldObject.buildings.House {
~ Image i
~ WritableImage image
+ <<Create>> House(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.buildings.TallHouse {
~ Image i
~ WritableImage image
+ <<Create>> TallHouse(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.npc.Man1 {
~ Image i
~ WritableImage image
+ <<Create>> Man1(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.npc.Chimera {
~ Image i
~ WritableImage image
+ <<Create>> Chimera(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.Entity {
+ int WorldX
+ int speed
+ String direction
+ Rectangle solidArea
+ Rectangle sprite
+ int solidAreaDefaultX
+ boolean collisionOn
- int z
+ String name
+ int getZ()
+ void draw(GraphicsContext)
+ boolean isDestroyed()
+ void setZ(int)
+ boolean isCollision()
+ void setName(String)
+ void setWorldX(int)
+ void setWorldY(int)
+ String getName()
}
class worldObject.buildings.Guild {
~ Image i
~ WritableImage image
+ <<Create>> Guild(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.forest.ForestTreeB {
~ Image i
~ WritableImage image
+ <<Create>> ForestTreeB(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.buildings.Statue {
~ Image i
~ WritableImage image
+ <<Create>> Statue(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
abstract class worldObject.BaseObject {
+ Image image
+ String name
+ boolean collision
+ double WorldX
+ Rectangle solidArea
+ double solidAreaDefaultX
+ double solidAreaDefaultY
+ double scaleX
+ boolean destroyed
+ int z
+ <<Create>> BaseObject(double,double)
+ <<Create>> BaseObject(double,double,double,double,double,double,double,double)
+ void draw(GraphicsContext)
+ void setScale(double,double)
+ void update()
+ int getZ()
+ Image getImage()
+ String getName()
+ void setWorldX(int)
+ void setWorldY(int)
+ void setName(String)
+ void setCollision(Boolean)
+ void setImage(Image)
+ boolean isCollision()
+ void setDestroyed(boolean)
}
class worldObject.npc.Man1Left {
~ Image i
~ WritableImage image
+ <<Create>> Man1Left(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.forest.LightTree {
~ Image i
~ WritableImage image
+ <<Create>> LightTree(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.npc.Lady {
~ Image i
~ WritableImage image
+ <<Create>> Lady(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.forest.DeadTreeB {
~ Image i
~ WritableImage image
+ <<Create>> DeadTreeB(double,double,double,double,double,double,double,double)
+ boolean isDestroyed()
}
class worldObject.Warp {
+ <<Create>> Warp(double,double)
+ boolean isDestroyed()
}


worldObject.BaseObject <|-- worldObject.buildings.ChimneyHouse
worldObject.BaseObject <|-- worldObject.buildings.LongHouse
worldObject.BaseObject <|-- worldObject.forest.ForestTreeS
worldObject.BaseObject <|-- worldObject.npc.Merchant
worldObject.BaseObject <|-- worldObject.forest.NormalTree
interfaces.Moveable <|.. worldObject.Player
worldObject.Entity <|-- worldObject.Player
worldObject.BaseObject <|-- worldObject.buildings.House
worldObject.BaseObject <|-- worldObject.buildings.TallHouse
worldObject.BaseObject <|-- worldObject.npc.Man1
worldObject.BaseObject <|-- worldObject.npc.Chimera
interfaces.IRenderable <|.. worldObject.Entity
worldObject.BaseObject <|-- worldObject.buildings.Guild
worldObject.BaseObject <|-- worldObject.forest.ForestTreeB
worldObject.BaseObject <|-- worldObject.buildings.Statue
worldObject.Entity <|-- worldObject.BaseObject
worldObject.BaseObject <|-- worldObject.npc.Man1Left
worldObject.BaseObject <|-- worldObject.forest.LightTree
worldObject.BaseObject <|-- worldObject.npc.Lady
worldObject.BaseObject <|-- worldObject.forest.DeadTreeB
worldObject.BaseObject <|-- worldObject.Warp
@enduml